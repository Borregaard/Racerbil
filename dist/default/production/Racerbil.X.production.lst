

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Nov 18 11:05:08 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F684
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15     0000                     
    16                           ; Version 2.40
    17                           ; Generated 04/07/2022 GMT
    18                           ; 
    19                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F684 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0007                     	;# 
    58     000A                     	;# 
    59     000B                     	;# 
    60     000C                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0013                     	;# 
    69     0014                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0018                     	;# 
    74     0019                     	;# 
    75     001A                     	;# 
    76     001E                     	;# 
    77     001F                     	;# 
    78     0081                     	;# 
    79     0085                     	;# 
    80     0087                     	;# 
    81     008C                     	;# 
    82     008E                     	;# 
    83     008F                     	;# 
    84     0090                     	;# 
    85     0091                     	;# 
    86     0092                     	;# 
    87     0095                     	;# 
    88     0095                     	;# 
    89     0096                     	;# 
    90     0096                     	;# 
    91     0099                     	;# 
    92     009A                     	;# 
    93     009A                     	;# 
    94     009B                     	;# 
    95     009C                     	;# 
    96     009D                     	;# 
    97     009E                     	;# 
    98     009F                     	;# 
    99     0000                     	;# 
   100     0001                     	;# 
   101     0002                     	;# 
   102     0003                     	;# 
   103     0004                     	;# 
   104     0005                     	;# 
   105     0007                     	;# 
   106     000A                     	;# 
   107     000B                     	;# 
   108     000C                     	;# 
   109     000E                     	;# 
   110     000E                     	;# 
   111     000F                     	;# 
   112     0010                     	;# 
   113     0011                     	;# 
   114     0012                     	;# 
   115     0013                     	;# 
   116     0013                     	;# 
   117     0014                     	;# 
   118     0015                     	;# 
   119     0016                     	;# 
   120     0017                     	;# 
   121     0018                     	;# 
   122     0019                     	;# 
   123     001A                     	;# 
   124     001E                     	;# 
   125     001F                     	;# 
   126     0081                     	;# 
   127     0085                     	;# 
   128     0087                     	;# 
   129     008C                     	;# 
   130     008E                     	;# 
   131     008F                     	;# 
   132     0090                     	;# 
   133     0091                     	;# 
   134     0092                     	;# 
   135     0095                     	;# 
   136     0095                     	;# 
   137     0096                     	;# 
   138     0096                     	;# 
   139     0099                     	;# 
   140     009A                     	;# 
   141     009A                     	;# 
   142     009B                     	;# 
   143     009C                     	;# 
   144     009D                     	;# 
   145     009E                     	;# 
   146     009F                     	;# 
   147     0000                     	;# 
   148     0001                     	;# 
   149     0002                     	;# 
   150     0003                     	;# 
   151     0004                     	;# 
   152     0005                     	;# 
   153     0007                     	;# 
   154     000A                     	;# 
   155     000B                     	;# 
   156     000C                     	;# 
   157     000E                     	;# 
   158     000E                     	;# 
   159     000F                     	;# 
   160     0010                     	;# 
   161     0011                     	;# 
   162     0012                     	;# 
   163     0013                     	;# 
   164     0013                     	;# 
   165     0014                     	;# 
   166     0015                     	;# 
   167     0016                     	;# 
   168     0017                     	;# 
   169     0018                     	;# 
   170     0019                     	;# 
   171     001A                     	;# 
   172     001E                     	;# 
   173     001F                     	;# 
   174     0081                     	;# 
   175     0085                     	;# 
   176     0087                     	;# 
   177     008C                     	;# 
   178     008E                     	;# 
   179     008F                     	;# 
   180     0090                     	;# 
   181     0091                     	;# 
   182     0092                     	;# 
   183     0095                     	;# 
   184     0095                     	;# 
   185     0096                     	;# 
   186     0096                     	;# 
   187     0099                     	;# 
   188     009A                     	;# 
   189     009A                     	;# 
   190     009B                     	;# 
   191     009C                     	;# 
   192     009D                     	;# 
   193     009E                     	;# 
   194     009F                     	;# 
   195                           
   196                           	psect	strings
   197     00B3                     __pstrings:
   198     00B3                     stringtab:
   199     00B3                     __stringtab:
   200     00B3                     stringcode:	
   201                           ;	String table - string pointers are 1 byte each
   202                           
   203     00B3                     stringdir:
   204     00B3  3000               	movlw	high stringdir
   205     00B4  008A               	movwf	10
   206     00B5  0804               	movf	4,w
   207     00B6  0A84               	incf	4,f
   208     00B7  0782               	addwf	2,f
   209     00B8                     __stringbase:
   210     00B8  3400               	retlw	0
   211     00B9                     __end_of__stringtab:
   212     00B9                     _TMR0_TIME:
   213     00B9  3464               	retlw	100
   214     00BA                     __end_of_TMR0_TIME:
   215     001E                     _ADRESH	set	30
   216     001F                     _ADCON0bits	set	31
   217     0013                     _CCPR1L	set	19
   218     0015                     _CCP1CON	set	21
   219     0011                     _TMR2	set	17
   220     0012                     _T2CON	set	18
   221     0003                     _STATUS	set	3
   222     001F                     _ADCON0	set	31
   223     0019                     _CMCON0	set	25
   224     0001                     _TMR0	set	1
   225     000B                     _INTCONbits	set	11
   226     00F9                     _GO_DONE	set	249
   227     002D                     _RA5	set	45
   228     0092                     _TMR2ON	set	146
   229     009E                     _ADRESL	set	158
   230     0081                     _OPTION_REGbits	set	129
   231     0092                     _PR2	set	146
   232     009F                     _ADCON1	set	159
   233     0091                     _ANSEL	set	145
   234     0087                     _TRISCbits	set	135
   235     0085                     _TRISAbits	set	133
   236     008F                     _OSCCON	set	143
   237                           
   238                           	psect	cinit
   239     000B                     start_initialization:	
   240                           ; #config settings
   241                           
   242     000B                     __initialization:
   243                           
   244                           ; Clear objects allocated to COMMON
   245     000B  01F8               	clrf	__pbssCOMMON& (0+127)
   246     000C  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   247     000D  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   248     000E  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   249     000F                     end_of_initialization:	
   250                           ;End of C runtime variable initialization code
   251                           
   252     000F                     __end_of__initialization:
   253     000F  0183               	clrf	3
   254     0010  28A2               	ljmp	_main	;jump to C main() function
   255                           
   256                           	psect	bssCOMMON
   257     0078                     __pbssCOMMON:
   258     0078                     _ms_time:
   259     0078                     	ds	2
   260     007A                     _sec_time:
   261     007A                     	ds	2
   262                           
   263                           	psect	cstackCOMMON
   264     0070                     __pcstackCOMMON:
   265     0070                     ?_ISR:
   266     0070                     ??_ISR:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     0070                     ?_setup:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     ?_main:	
   273                           ; 1 bytes @ 0x0
   274                           
   275                           
   276                           ; 2 bytes @ 0x0
   277     0070                     	ds	2
   278     0072                     ??_setup:
   279     0072                     ?_ADC_Read:	
   280                           ; 1 bytes @ 0x2
   281                           
   282     0072                     ADC_Read@channel:	
   283                           ; 2 bytes @ 0x2
   284                           
   285                           
   286                           ; 2 bytes @ 0x2
   287     0072                     	ds	2
   288     0074                     ??_ADC_Read:
   289                           
   290                           ; 1 bytes @ 0x4
   291     0074                     	ds	2
   292     0076                     ??_main:
   293     0076                     main@ADC_PWM:	
   294                           ; 1 bytes @ 0x6
   295                           
   296                           
   297                           ; 2 bytes @ 0x6
   298     0076                     	ds	2
   299                           
   300                           	psect	maintext
   301     00A2                     __pmaintext:	
   302 ;;
   303 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   304 ;;
   305 ;; *************** function _main *****************
   306 ;; Defined at:
   307 ;;		line 82 in file "main.c"
   308 ;; Parameters:    Size  Location     Type
   309 ;;		None
   310 ;; Auto vars:     Size  Location     Type
   311 ;;  ADC_PWM         2    6[COMMON] int 
   312 ;; Return value:  Size  Location     Type
   313 ;;                  2   68[None  ] int 
   314 ;; Registers used:
   315 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   316 ;; Tracked objects:
   317 ;;		On entry : B00/0
   318 ;;		On exit  : 0/0
   319 ;;		Unchanged: 0/0
   320 ;; Data sizes:     COMMON   BANK0   BANK1
   321 ;;      Params:         0       0       0
   322 ;;      Locals:         2       0       0
   323 ;;      Temps:          0       0       0
   324 ;;      Totals:         2       0       0
   325 ;;Total ram usage:        2 bytes
   326 ;; Hardware stack levels required when called: 2
   327 ;; This function calls:
   328 ;;		_ADC_Read
   329 ;;		_setup
   330 ;; This function is called by:
   331 ;;		Startup code after reset
   332 ;; This function uses a non-reentrant model
   333 ;;
   334                           
   335     00A2                     _main:	
   336                           ;psect for function _main
   337                           
   338     00A2                     l793:	
   339                           ;incstack = 0
   340                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   341                           
   342                           
   343                           ;main.c: 83:     setup();
   344     00A2  2049               	fcall	_setup
   345     00A3                     l795:
   346                           
   347                           ;main.c: 87:         RA5 = 0;
   348     00A3  1283               	bcf	3,5	;RP0=0, select bank0
   349     00A4  1285               	bcf	5,5	;volatile
   350     00A5                     l797:
   351                           
   352                           ;main.c: 89:         int ADC_PWM = ADC_Read(6);
   353     00A5  3006               	movlw	6
   354     00A6  00F2               	movwf	ADC_Read@channel
   355     00A7  3000               	movlw	0
   356     00A8  00F3               	movwf	ADC_Read@channel+1
   357     00A9  2011               	fcall	_ADC_Read
   358     00AA  0873               	movf	?_ADC_Read+1,w
   359     00AB  00F7               	movwf	main@ADC_PWM+1
   360     00AC  0872               	movf	?_ADC_Read,w
   361     00AD  00F6               	movwf	main@ADC_PWM
   362     00AE                     l799:
   363                           
   364                           ;main.c: 96:         CCPR1L = ADC_PWM;
   365     00AE  0876               	movf	main@ADC_PWM,w
   366     00AF  1283               	bcf	3,5	;RP0=0, select bank0
   367     00B0  0093               	movwf	19	;volatile
   368     00B1  28A3               	goto	l795
   369     00B2  280A               	ljmp	start
   370     00B3                     __end_of_main:
   371                           
   372                           	psect	text1
   373     0049                     __ptext1:	
   374 ;; *************** function _setup *****************
   375 ;; Defined at:
   376 ;;		line 42 in file "main.c"
   377 ;; Parameters:    Size  Location     Type
   378 ;;		None
   379 ;; Auto vars:     Size  Location     Type
   380 ;;		None
   381 ;; Return value:  Size  Location     Type
   382 ;;                  1    wreg      void 
   383 ;; Registers used:
   384 ;;		wreg
   385 ;; Tracked objects:
   386 ;;		On entry : 0/0
   387 ;;		On exit  : 0/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMMON   BANK0   BANK1
   390 ;;      Params:         0       0       0
   391 ;;      Locals:         0       0       0
   392 ;;      Temps:          0       0       0
   393 ;;      Totals:         0       0       0
   394 ;;Total ram usage:        0 bytes
   395 ;; Hardware stack levels used: 1
   396 ;; Hardware stack levels required when called: 1
   397 ;; This function calls:
   398 ;;		Nothing
   399 ;; This function is called by:
   400 ;;		_main
   401 ;; This function uses a non-reentrant model
   402 ;;
   403                           
   404     0049                     _setup:	
   405                           ;psect for function _setup
   406                           
   407     0049                     l683:	
   408                           ;incstack = 0
   409                           ; Regs used in _setup: [wreg]
   410                           
   411                           
   412                           ;main.c: 43:     OSCCON = 0b01110000;
   413     0049  3070               	movlw	112
   414     004A  1683               	bsf	3,5	;RP0=1, select bank1
   415     004B  008F               	movwf	15	;volatile
   416                           
   417                           ;main.c: 44:     CMCON0 = 0b00000111;
   418     004C  3007               	movlw	7
   419     004D  1283               	bcf	3,5	;RP0=0, select bank0
   420     004E  0099               	movwf	25	;volatile
   421     004F                     l685:
   422                           
   423                           ;main.c: 46:     TRISAbits.TRISA0 = 1;
   424     004F  1683               	bsf	3,5	;RP0=1, select bank1
   425     0050  1405               	bsf	5,0	;volatile
   426     0051                     l687:
   427                           
   428                           ;main.c: 47:     TRISAbits.TRISA1 = 0;
   429     0051  1085               	bcf	5,1	;volatile
   430     0052                     l689:
   431                           
   432                           ;main.c: 48:     TRISAbits.TRISA5 = 0;
   433     0052  1285               	bcf	5,5	;volatile
   434     0053                     l691:
   435                           
   436                           ;main.c: 50:     TRISCbits.TRISC2 = 1;
   437     0053  1507               	bsf	7,2	;volatile
   438     0054                     l693:
   439                           
   440                           ;main.c: 51:     TRISCbits.TRISC3 = 1;
   441     0054  1587               	bsf	7,3	;volatile
   442     0055                     l695:
   443                           
   444                           ;main.c: 52:     TRISCbits.TRISC5 = 0;
   445     0055  1287               	bcf	7,5	;volatile
   446                           
   447                           ;main.c: 54:     CMCON0 = 0b00000111;
   448     0056  3007               	movlw	7
   449     0057  1283               	bcf	3,5	;RP0=0, select bank0
   450     0058  0099               	movwf	25	;volatile
   451                           
   452                           ;main.c: 55:     ANSEL = 0b11100000;
   453     0059  30E0               	movlw	224
   454     005A  1683               	bsf	3,5	;RP0=1, select bank1
   455     005B  0091               	movwf	17	;volatile
   456                           
   457                           ;main.c: 56:     ADCON0 = 0b00011001;
   458     005C  3019               	movlw	25
   459     005D  1283               	bcf	3,5	;RP0=0, select bank0
   460     005E  009F               	movwf	31	;volatile
   461                           
   462                           ;main.c: 57:     ADCON1 = 0b00010000;
   463     005F  3010               	movlw	16
   464     0060  1683               	bsf	3,5	;RP0=1, select bank1
   465     0061  009F               	movwf	31	;volatile
   466                           
   467                           ;main.c: 59:     STATUS = 0b00000111;
   468     0062  3007               	movlw	7
   469     0063  1283               	bcf	3,5	;RP0=0, select bank0
   470     0064  0083               	movwf	3	;volatile
   471                           
   472                           ;main.c: 60:     T2CON = 0b11111111;
   473     0065  30FF               	movlw	255
   474     0066  0092               	movwf	18	;volatile
   475                           
   476                           ;main.c: 61:     TMR2 = 100;
   477     0067  3064               	movlw	100
   478     0068  0091               	movwf	17	;volatile
   479                           
   480                           ;main.c: 62:     PR2 = 255;
   481     0069  30FF               	movlw	255
   482     006A  1683               	bsf	3,5	;RP0=1, select bank1
   483     006B  0092               	movwf	18	;volatile
   484                           
   485                           ;main.c: 63:     CCP1CON = 0b00001100;
   486     006C  300C               	movlw	12
   487     006D  1283               	bcf	3,5	;RP0=0, select bank0
   488     006E  0095               	movwf	21	;volatile
   489                           
   490                           ;main.c: 64:     CCPR1L = 120;
   491     006F  3078               	movlw	120
   492     0070  0093               	movwf	19	;volatile
   493     0071                     l697:
   494                           
   495                           ;main.c: 65:     TMR2ON = 1;
   496     0071  1512               	bsf	18,2	;volatile
   497     0072                     l699:
   498                           
   499                           ;main.c: 68:     INTCONbits.GIE = 1;
   500     0072  178B               	bsf	11,7	;volatile
   501     0073                     l701:
   502                           
   503                           ;main.c: 69:     INTCONbits.PEIE = 1;
   504     0073  170B               	bsf	11,6	;volatile
   505     0074                     l703:
   506                           
   507                           ;main.c: 70:     INTCONbits.TMR0IE = 1;
   508     0074  168B               	bsf	11,5	;volatile
   509     0075                     l705:
   510                           
   511                           ;main.c: 71:     INTCONbits.TMR0IF = 0;
   512     0075  110B               	bcf	11,2	;volatile
   513     0076                     l707:
   514                           
   515                           ;main.c: 73:     OPTION_REGbits.T0CS = 0;
   516     0076  1683               	bsf	3,5	;RP0=1, select bank1
   517     0077  1281               	bcf	1,5	;volatile
   518     0078                     l709:
   519                           
   520                           ;main.c: 74:     OPTION_REGbits.T0SE = 0;
   521     0078  1201               	bcf	1,4	;volatile
   522     0079                     l711:
   523                           
   524                           ;main.c: 75:     OPTION_REGbits.PSA = 0;
   525     0079  1181               	bcf	1,3	;volatile
   526     007A                     l713:
   527                           
   528                           ;main.c: 76:     OPTION_REGbits.PS2 = 1;
   529     007A  1501               	bsf	1,2	;volatile
   530     007B                     l715:
   531                           
   532                           ;main.c: 77:     OPTION_REGbits.PS1 = 1;
   533     007B  1481               	bsf	1,1	;volatile
   534     007C                     l717:
   535                           
   536                           ;main.c: 78:     OPTION_REGbits.PS0 = 0;
   537     007C  1001               	bcf	1,0	;volatile
   538     007D                     l64:
   539     007D  0008               	return
   540     007E                     __end_of_setup:
   541                           
   542                           	psect	text2
   543     0011                     __ptext2:	
   544 ;; *************** function _ADC_Read *****************
   545 ;; Defined at:
   546 ;;		line 101 in file "main.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;  channel         2    2[COMMON] int 
   549 ;; Auto vars:     Size  Location     Type
   550 ;;		None
   551 ;; Return value:  Size  Location     Type
   552 ;;                  2    2[COMMON] int 
   553 ;; Registers used:
   554 ;;		wreg, status,2, status,0, btemp+1
   555 ;; Tracked objects:
   556 ;;		On entry : 0/0
   557 ;;		On exit  : 0/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMMON   BANK0   BANK1
   560 ;;      Params:         2       0       0
   561 ;;      Locals:         0       0       0
   562 ;;      Temps:          2       0       0
   563 ;;      Totals:         4       0       0
   564 ;;Total ram usage:        4 bytes
   565 ;; Hardware stack levels used: 1
   566 ;; Hardware stack levels required when called: 1
   567 ;; This function calls:
   568 ;;		Nothing
   569 ;; This function is called by:
   570 ;;		_main
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574     0011                     _ADC_Read:	
   575                           ;psect for function _ADC_Read
   576                           
   577     0011                     l773:	
   578                           ;incstack = 0
   579                           ; Regs used in _ADC_Read: [wreg+status,2+status,0+btemp+1]
   580                           
   581                           
   582                           ;main.c: 102:     if (channel > 7) {
   583     0011  0873               	movf	ADC_Read@channel+1,w
   584     0012  3A80               	xorlw	128
   585     0013  00FF               	movwf	btemp+1
   586     0014  3080               	movlw	128
   587     0015  027F               	subwf	btemp+1,w
   588     0016  1D03               	skipz
   589     0017  281A               	goto	u65
   590     0018  3008               	movlw	8
   591     0019  0272               	subwf	ADC_Read@channel,w
   592     001A                     u65:
   593     001A  1C03               	skipc
   594     001B  281D               	goto	u61
   595     001C  281E               	goto	u60
   596     001D                     u61:
   597     001D  2821               	goto	l75
   598     001E                     u60:
   599     001E                     l775:
   600                           
   601                           ;main.c: 103:         return 0;
   602     001E  01F2               	clrf	?_ADC_Read
   603     001F  01F3               	clrf	?_ADC_Read+1
   604     0020  2848               	goto	l76
   605     0021                     l75:	
   606                           ;main.c: 104:     }
   607                           
   608                           
   609                           ;main.c: 106:     ADCON0bits.CHS0 = 0;
   610     0021  1283               	bcf	3,5	;RP0=0, select bank0
   611     0022  111F               	bcf	31,2	;volatile
   612                           
   613                           ;main.c: 107:     ADCON0bits.CHS1 = 0;
   614     0023  119F               	bcf	31,3	;volatile
   615                           
   616                           ;main.c: 108:     ADCON0bits.CHS2 = 0;
   617     0024  121F               	bcf	31,4	;volatile
   618     0025                     l779:
   619                           
   620                           ;main.c: 110:     ADCON0 |= channel << 2;
   621     0025  0872               	movf	ADC_Read@channel,w	;volatile
   622     0026  00F4               	movwf	??_ADC_Read
   623     0027  3001               	movlw	1
   624     0028                     u75:
   625     0028  1003               	clrc
   626     0029  0DF4               	rlf	??_ADC_Read,f
   627     002A  3EFF               	addlw	-1
   628     002B  1D03               	skipz
   629     002C  2828               	goto	u75
   630     002D  1003               	clrc
   631     002E  0D74               	rlf	??_ADC_Read,w
   632     002F  00F5               	movwf	??_ADC_Read+1
   633     0030  0875               	movf	??_ADC_Read+1,w
   634     0031  049F               	iorwf	31,f	;volatile
   635     0032                     l781:
   636                           
   637                           ;main.c: 111:     _delay((unsigned long)((2)*(8000000/4000.0)));
   638     0032  3006               	movlw	6
   639     0033  00F5               	movwf	??_ADC_Read+1
   640     0034  3030               	movlw	48
   641     0035  00F4               	movwf	??_ADC_Read
   642     0036                     u97:
   643     0036  0BF4               	decfsz	??_ADC_Read,f
   644     0037  2836               	goto	u97
   645     0038  0BF5               	decfsz	??_ADC_Read+1,f
   646     0039  2836               	goto	u97
   647     003A  0000               	nop
   648     003B                     l783:
   649                           
   650                           ;main.c: 112:     GO_DONE = 1;
   651     003B  1283               	bcf	3,5	;RP0=0, select bank0
   652     003C  149F               	bsf	31,1	;volatile
   653     003D                     l77:	
   654                           ;main.c: 113:     while (GO_DONE);
   655                           
   656     003D  189F               	btfsc	31,1	;volatile
   657     003E  2840               	goto	u81
   658     003F  2841               	goto	u80
   659     0040                     u81:
   660     0040  283D               	goto	l77
   661     0041                     u80:
   662     0041                     l785:
   663                           
   664                           ;main.c: 114:     return ADRESH;
   665     0041  081E               	movf	30,w	;volatile
   666     0042  00F4               	movwf	??_ADC_Read
   667     0043  01F5               	clrf	??_ADC_Read+1
   668     0044  0874               	movf	??_ADC_Read,w
   669     0045  00F2               	movwf	?_ADC_Read
   670     0046  0875               	movf	??_ADC_Read+1,w
   671     0047  00F3               	movwf	?_ADC_Read+1
   672     0048                     l76:
   673     0048  0008               	return
   674     0049                     __end_of_ADC_Read:
   675                           
   676                           	psect	text3
   677     007E                     __ptext3:	
   678 ;; *************** function _ISR *****************
   679 ;; Defined at:
   680 ;;		line 28 in file "main.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;		None
   683 ;; Auto vars:     Size  Location     Type
   684 ;;		None
   685 ;; Return value:  Size  Location     Type
   686 ;;                  1    wreg      void 
   687 ;; Registers used:
   688 ;;		wreg, status,2, status,0
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMMON   BANK0   BANK1
   694 ;;      Params:         0       0       0
   695 ;;      Locals:         0       0       0
   696 ;;      Temps:          2       0       0
   697 ;;      Totals:         2       0       0
   698 ;;Total ram usage:        2 bytes
   699 ;; Hardware stack levels used: 1
   700 ;; This function calls:
   701 ;;		Nothing
   702 ;; This function is called by:
   703 ;;		Interrupt level 1
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707     007E                     _ISR:	
   708                           ;psect for function _ISR
   709                           
   710     007E                     i1l739:
   711                           
   712                           ;main.c: 29:     if (INTCONbits.TMR0IF == 1) {
   713     007E  1D0B               	btfss	11,2	;volatile
   714     007F  2881               	goto	u4_21
   715     0080  2882               	goto	u4_20
   716     0081                     u4_21:
   717     0081  289B               	goto	i1l61
   718     0082                     u4_20:
   719     0082                     i1l741:
   720                           
   721                           ;main.c: 30:         INTCONbits.TMR0IF = 0;
   722     0082  110B               	bcf	11,2	;volatile
   723     0083                     i1l743:
   724                           
   725                           ;main.c: 32:         ms_time++;
   726     0083  3001               	movlw	1
   727     0084  07F8               	addwf	_ms_time,f
   728     0085  1803               	skipnc
   729     0086  0AF9               	incf	_ms_time+1,f
   730     0087  3000               	movlw	0
   731     0088  07F9               	addwf	_ms_time+1,f
   732     0089                     i1l745:
   733                           
   734                           ;main.c: 33:         if (ms_time == 100) {
   735     0089  3064               	movlw	100
   736     008A  0678               	xorwf	_ms_time,w
   737     008B  0479               	iorwf	_ms_time+1,w
   738     008C  1D03               	btfss	3,2
   739     008D  288F               	goto	u5_21
   740     008E  2890               	goto	u5_20
   741     008F                     u5_21:
   742     008F  2898               	goto	i1l751
   743     0090                     u5_20:
   744     0090                     i1l747:
   745                           
   746                           ;main.c: 34:             ms_time = 0;
   747     0090  01F8               	clrf	_ms_time
   748     0091  01F9               	clrf	_ms_time+1
   749     0092                     i1l749:
   750                           
   751                           ;main.c: 35:             sec_time++;
   752     0092  3001               	movlw	1
   753     0093  07FA               	addwf	_sec_time,f
   754     0094  1803               	skipnc
   755     0095  0AFB               	incf	_sec_time+1,f
   756     0096  3000               	movlw	0
   757     0097  07FB               	addwf	_sec_time+1,f
   758     0098                     i1l751:
   759                           
   760                           ;main.c: 38:         TMR0 = TMR0_TIME;
   761     0098  3064               	movlw	100
   762     0099  1283               	bcf	3,5	;RP0=0, select bank0
   763     009A  0081               	movwf	1	;volatile
   764     009B                     i1l61:
   765     009B  0871               	movf	??_ISR+1,w
   766     009C  008A               	movwf	10
   767     009D  0E70               	swapf	??_ISR,w
   768     009E  0083               	movwf	3
   769     009F  0EFE               	swapf	btemp,f
   770     00A0  0E7E               	swapf	btemp,w
   771     00A1  0009               	retfie
   772     00A2                     __end_of_ISR:
   773     007E                     btemp	set	126	;btemp
   774     007E                     wtemp0	set	126
   775                           
   776                           	psect	intentry
   777     0004                     __pintentry:	
   778                           ;incstack = 0
   779                           ; Regs used in _ISR: [wreg+status,2+status,0]
   780                           
   781     0004                     interrupt_function:
   782     007E                     saved_w	set	btemp
   783     0004  00FE               	movwf	btemp
   784     0005  0E03               	swapf	3,w
   785     0006  00F0               	movwf	??_ISR
   786     0007  080A               	movf	10,w
   787     0008  00F1               	movwf	??_ISR+1
   788     0009  287E               	ljmp	_ISR
   789                           
   790                           	psect	config
   791                           
   792                           ;Config register CONFIG @ 0x2007
   793                           ;	Oscillator Selection bits
   794                           ;	FOSC = INTOSCCLK, INTOSC oscillator: CLKOUT function on RA4/OSC2/CLKOUT pin, I/O funct
      +                          ion on RA5/OSC1/CLKIN
   795                           ;	Watchdog Timer Enable bit
   796                           ;	WDTE = OFF, WDT disabled
   797                           ;	Power-up Timer Enable bit
   798                           ;	PWRTE = ON, PWRT enabled
   799                           ;	MCLR Pin Function Select bit
   800                           ;	MCLRE = ON, MCLR pin function is MCLR
   801                           ;	Code Protection bit
   802                           ;	CP = OFF, Program memory code protection is disabled
   803                           ;	Data Code Protection bit
   804                           ;	CPD = OFF, Data memory code protection is disabled
   805                           ;	Brown Out Detect
   806                           ;	BOREN = OFF, BOR disabled
   807                           ;	Internal External Switchover bit
   808                           ;	IESO = OFF, Internal External Switchover mode is disabled
   809                           ;	Fail-Safe Clock Monitor Enabled bit
   810                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   811     2007                     	org	8199
   812     2007  30E5               	dw	12517

Data Sizes:
    Strings     0
    Constant    1
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80      0       0
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_Read

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     143
                                              6 COMMON     2     2      0
                           _ADC_Read
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2     120
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _setup

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      0       0       4        0.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0       C       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0       C       8        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Nov 18 11:05:08 2022

                      pc 0002                       l64 007D                       l75 0021  
                     l76 0048                       l77 003D                       u60 001E  
                     u61 001D                       u80 0041                       u81 0040  
                     u65 001A                       u75 0028                       u97 0036  
                     fsr 0004                      l701 0073                      l711 0079  
                    l703 0074                      l713 007A                      l705 0075  
                    l715 007B                      l707 0076                      l717 007C  
                    l709 0078                      l691 0053                      l683 0049  
                    l781 0032                      l773 0011                      l693 0054  
                    l685 004F                      l783 003B                      l775 001E  
                    l695 0055                      l687 0051                      l785 0041  
                    l697 0071                      l689 0052                      l793 00A2  
                    l779 0025                      l699 0072                      l795 00A3  
                    l797 00A5                      l799 00AE                      _RA5 002D  
                    _PR2 0092                      _ISR 007E                     ?_ISR 0070  
                   i1l61 009B                     _TMR0 0001                     _TMR2 0011  
                   u4_20 0082                     u4_21 0081                     u5_20 0090  
                   u5_21 008F                     _main 00A2                     btemp 007E  
       __end_of_ADC_Read 0049                     start 000A                    ??_ISR 0070  
                  ?_main 0070                    _ANSEL 0091                    _T2CON 0012  
                  i1l741 0082                    i1l751 0098                    i1l743 0083  
                  i1l745 0089                    i1l747 0090                    i1l739 007E  
                  i1l749 0092                    _setup 0049                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 000B  
           __end_of_main 00B3                   ??_main 0076                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
                 _CCPR1L 0013                   _CMCON0 0019                   ?_setup 0070  
                 _OSCCON 008F                   _TMR2ON 0092                   _STATUS 0003  
      __end_of_TMR0_TIME 00BA          ADC_Read@channel 0072                ?_ADC_Read 0072  
                 saved_w 007E  __end_of__initialization 000F           __pcstackCOMMON 0070  
          __end_of_setup 007E           _OPTION_REGbits 0081               ??_ADC_Read 0074  
                ??_setup 0072               __pmaintext 00A2               __pintentry 0004  
                _CCP1CON 0015                  _GO_DONE 00F9               __stringtab 00B3  
                __ptext1 0049                  __ptext2 0011                  __ptext3 007E  
                _ms_time 0078     end_of_initialization 000F                _TMR0_TIME 00B9  
              _TRISAbits 0085                _TRISCbits 0087      start_initialization 000B  
            __end_of_ISR 00A2              __pbssCOMMON 0078                ___latbits 0000  
              __pstrings 00B3                 _ADC_Read 0011        interrupt_function 0004  
             _ADCON0bits 001F              __stringbase 00B8       __end_of__stringtab 00B9  
               _sec_time 007A               _INTCONbits 000B                 intlevel1 0000  
              stringcode 00B3                 stringdir 00B3                 stringtab 00B3  
            main@ADC_PWM 0076  
